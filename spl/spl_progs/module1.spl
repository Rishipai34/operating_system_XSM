// process manager module ;
// function number 1 = get pcb 
// function number 2 = free user area page
// function number 4 = free page table 
// function number 3 = exit process 
alias functionNum R1;
alias passedPID R2;

if (functionNum == 1) then 
    alias counter R3;
    counter = 0;
    while (counter < 16) do 
        if([PROCESS_TABLE + counter * 16 + 4] == TERMINATED) then 
            [PROCESS_TABLE + counter * 16 + 1] = counter;
            [PROCESS_TABLE + counter * 16 + 4] = ALLOCATED;
            [PROCESS_TABLE + counter * 16 + 14] = PAGE_TABLE_BASE + counter * 20;
            [PROCESS_TABLE + counter * 16 + 15] = 10;
            R0 = counter;
            return;
        endif;
        counter = counter + 1;
    endwhile;
    R0 = -1;
    return;
endif;

if (functionNum == 2) then
    multipush(R1, R2);
    R1 = 2;
    R2 = [PROCESS_TABLE + passedPID * 16 + 11];
    call MOD_2;
    multipop(R1, R2);
    return ;
endif ;

if (functionNum == 3) then 
    if ([PROCESS_TABLE + passedPID * 16 + 9] != 9) then
        alias counter R3;
        counter = 0;
        while (counter <= 15) do 
            if (([PROCESS_TABLE + counter * 16 + 4] == WAIT_PROCESS) && ([PROCESS_TABLE + counter * 16 + 5] == passedPID)) then 
                [PROCESS_TABLE + counter * 16 + 4] = READY;
            endif;
            if ([PROCESS_TABLE + counter * 16 + 2] == passedPID) then 
                [PROCESS_TABLE + counter * 16 + 2] = -1;
            endif;
            counter = counter + 1;
        endwhile;
    endif;
    multipush(R1, R2);
    R1 = 2;
    R2 = passedPID ; 
    call MOD_1;
    R1 = 4;
    call MOD_1;
    multipop(R1, R2);
    [PROCESS_TABLE + passedPID * 16 + 4] = TERMINATED;
    return;
endif;

if (functionNum == 4) then
    alias page_base R5;
    page_base = PAGE_TABLE_BASE + passedPID * 20; 
    [page_base + 0] = -1;
    [page_base + 1] = "0000";
    [page_base + 2] = -1;
    [page_base + 3] = "0000";
    alias counter R3;
    counter = 4;
    while (counter <= 18) do 
        if ([page_base + counter] != -1) then 
            multipush(R1, R2, R3, R5);
            R1 = 2;
            R2 = [page_base + counter];
            call MOD_2; 
            multipop(R1, R2, R3, R5);
            [page_base + counter] = -1;
            [page_base + counter + 1] = "0000";
        endif;
        counter = counter + 2;
    endwhile;

    if ([DISK_MAP_TABLE + passedPID * 10 + 2] != -1) then 
        multipush(R2, R3); 
        R1 = 4;
        R2 = [DISK_MAP_TABLE + passedPID * 10 + 2]; 
        call MOD_2;
        multipop(R2, R3);
    endif;

    if ([DISK_MAP_TABLE + passedPID * 10 + 3] != -1) then 
        multipush(R2, R3); 
        R1 = 4;
        R2 = [DISK_MAP_TABLE + passedPID * 10 + 3]; 
        call MOD_2;
        multipop(R2, R3);
    endif; 

    if ([DISK_MAP_TABLE + passedPID * 10 + 8] != -1) then 
        multipush(R2, R3); 
        R1 = 4;
        R2 = [DISK_MAP_TABLE + passedPID * 10 + 8]; 
        call MOD_2;
        multipop(R2, R3);
    endif; 

    if ([DISK_MAP_TABLE + passedPID * 10 + 9] != -1) then 
        multipush(R2, R3); 
        R1 = 4;
        R2 = [DISK_MAP_TABLE + passedPID * 10 + 9]; 
        call MOD_2;
        multipop(R2, R3);
    endif; 

    counter = 0; 
    while (counter < 10) do 
        [DISK_MAP_TABLE + passedPID * 10 + counter] = -1;
        counter = counter + 1;
    endwhile;
    return;
endif;