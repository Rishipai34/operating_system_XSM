// device manager module 
// function number = 3 -> terminal write 
// function number = 4 -> terminal reads
// function number = 1 -> disk store
// function number = 2 -> dist load 
alias functionNum R1;
alias currentPID R2;
alias physical_address R5;
alias blockNum R3;
alias pageNum R4;
if (functionNum == 2) then 
    multipush(R1, R2, R3, R4, R5);
    functionNum = 3 ;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3, R4, R5);
    [DISK_STATUS_TABLE + 1] = 0;
    [DISK_STATUS_TABLE + 2] = pageNum ;
    [DISK_STATUS_TABLE + 3] = blockNum;
    [DISK_STATUS_TABLE + 4] = currentPID;
    load(pageNum, blockNum);
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_DISK;
    multipush(R0, R1, R2, R3, R4, R5, R6);
    call MOD_5;
    multipop(R0, R1, R2, R3, R4, R5, R6);
    breakpoint;
    return ;
endif;

if(functionNum == 3) then 
    multipush(R1, R2, R3);
    functionNum = 8;
    R2 = currentPID; 
    call MOD_0;
    multipop(R1, R2, R3); 
    print(R3);
    multipush(R1, R2, R3);
    functionNum = 9;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    return;
endif;

if(functionNum == 4) then
    multipush(R1, R2,R3); 
    R1 = 8;
    R2 = currentPID;
    call MOD_0;
    multipop(R1, R2, R3);
    read;
    [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_TERMINAL;
    multipush(R0, R1, R2, R3);
    call MOD_5;
    multipop(R0, R1, R2, R3);
    physical_address = [PTBR + 2 * (R3/512)] * 512 + (R3 % 512);
    [physical_address] = [PROCESS_TABLE + currentPID * 16 + 8];
    return;
endif;
return;