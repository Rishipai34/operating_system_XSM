//memory manager module 
// function number = 2 implies release page 
// function number = 1 implies get free page
// function number = 5 implies get code block 
// function number = 4 implies release block

alias functionNum R1;
if (functionNum == 1) then 
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while([SYSTEM_STATUS_TABLE + 2] == 0) do 
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;
        multipush(R0, R1, R2);
        call MOD_5;
        multipop(R0, R1, R2);
    endwhile;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    alias counter R0;
    counter = 0;
    while([MEMORY_FREE_LIST + counter] != 0) do 
        counter = counter + 1;
    endwhile;
    [MEMORY_FREE_LIST + counter] = 1;
    // page number of the freed page 
    return ;
endif;

if ( functionNum == 2) then
    alias pagenumber R2;
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    if ([MEMORY_FREE_LIST + R2] == 0) then 
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
    alias counter R3;
    counter = 0;
    while(counter <= 15 ) do 
        if ([PROCESS_TABLE + counter * 16 + 4] == WAIT_MEM ) then 
            [PROCESS_TABLE + counter * 16 + 4] = READY;
        endif;
        counter = counter + 1;
    endwhile;
    return;
endif;

if (functionNum == 5) then
    alias blocknumber R2;
    alias processnum R3;
    alias diskmapentry R4;
    processnum = 1;
    diskmapentry = 4;
    // check the disk map entries of all processes and check whether the requested code block is already being used 
    while (processnum <= 15) do 
        diskmapentry = 4;
        while (diskmapentry <= 7) do 
            if (([DISK_MAP_TABLE + processnum * 10 + diskmapentry] == blocknumber) && ([PAGE_TABLE_BASE + processnum * 20 + diskmapentry * 2] != -1)) then 
                R0 = [PAGE_TABLE_BASE + processnum * 20 + diskmapentry * 2];
                [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + processnum * 20 + diskmapentry *2]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + processnum * 20 + diskmapentry *2]] + 1; 
                return;
            endif;
            diskmapentry = diskmapentry + 1;
        endwhile;
        processnum = processnum + 1;
    endwhile;
    
    if (processnum == 16) then 
        multipush(R2, R3, R4);
        R1 = 1;
        call MOD_2;
        multipop(R2, R3, R4);
        multipush(R0, R2, R3, R4);
        R4 = R0;
        R3 = blocknumber;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R1 = 2;
        call MOD_4;
        multipop(R0, R2, R3, R4);
        return;
    endif;
endif;

if (functionNum == 4) then 
    alias blocknumber R2;
    alias passedPID R3;
    [DISK_FREE_LIST + blocknumber] = [DISK_FREE_LIST + blocknumber] - 1;
    return;
endif;




    



